-- GENERATED by C->Haskell Compiler, version 0.16.5 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "Test.chs" #-}module Test where

import Control.Applicative
import Control.Monad
import Foreign.Storable
import qualified Data.Vector.Storable as S
import Foreign.ForeignPtr.Safe
import Foreign.C.Types
import Foreign.Ptr
import System.IO.Unsafe

data MyType = MyType { flag :: Int
                     , value :: Double }

instance Storable MyType where
  sizeOf a = 12
{-# LINE 16 "Test.chs" #-}
  alignment a = alignment (undefined :: CDouble)
  peek p = MyType  <$> liftM fromIntegral ((\ptr -> do {peekByteOff ptr 0 ::IO CInt}) p)
                   <*> liftM realToFrac ((\ptr -> do {peekByteOff ptr 4 ::IO CDouble}) p)
  poke p x = do
    (\ptr val -> do {pokeByteOff ptr 0 (val::CInt)}) p $ fromIntegral $ flag x
    (\ptr val -> do {pokeByteOff ptr 4 (val::CDouble)}) p $ realToFrac $ value x

sum1 :: S.Vector MyType -> Double
sum1 vec = let (fptr, len) = S.unsafeToForeignPtr0 vec
           in unsafePerformIO $ withForeignPtr fptr $ \p -> 
               return (realToFrac $ hsum p $ fromIntegral len)

foreign import ccall safe "Test.chs.h _sum"
  hsum :: Ptr MyType -> CInt -> CDouble

